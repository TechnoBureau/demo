name: Image Build
on:
  #schedule:
  #  - cron: '31 14 * * *'
  push:
    branches:
      - main
    # Publish semver tags as releases.
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Custom version (optional)'
        required: false

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  MAJOR: 11
  MINOR: 0
  FIX: 1

jobs:
  initialize:
    # The workflow runs on self hosted runner, having docker available
    runs-on: [ ubuntu-latest ]
    name: Initialize
    outputs:
      images: ${{ steps.identify-images.outputs.images }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Identify images
        id: identify-images
        run: |
              cd builders
              result=""
              for d in * ; do
                #if [ -f "$d/build.sh" ]; then
                  if [ -z $result ]; then
                    result="$d"
                  else
                    result="$result,$d"
                  fi
                #fi
              done
              #echo $result
              echo "images=$result" >> $GITHUB_OUTPUT
              #echo "{images}={result}" >> $GITHUB_OUTPUT
      - name: Get Version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            # Use the manually provided version
            export VERSION=${{ github.event.inputs.version }}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            export VERSION="${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIX }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Extract version from the tag and remove the 'v' prefix
            export VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          else
            export VERSION=${{ github.ref_name }}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      # - name: Prepare Git credentials script
      #   run: echo 'echo ${GITHUB_TOKEN}' > $GIT_ASKPASS && chmod +x $GIT_ASKPASS

  GenerateImageReleaseReport:
    name: Generate image release report
    if: ${{ success() }}
    needs: [ initialize ]
    runs-on: [ ubuntu-latest ]
    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab #v3.5.2

      - name: Generate images release report
        run: |
          images=${{ needs.initialize.outputs.images }}
          releaseReport="# ðŸš€ Released Packages $RELEASE ðŸš€\n"
          releaseReport+="| ðŸ“¦ Package | Internal Repository Location | Public Repository Location |\n"
          releaseReport+="| :-: | :-: | :-: |"
          IFS=',' read -ra imageArray <<< "$images"
          for image in "${imageArray[@]}"; do
            releaseReport+="\n|$image|${{ needs.initialize.outputs.version }}|1.0.0|"
          done
          echo -e "$releaseReport" >> $GITHUB_STEP_SUMMARY
          echo -e "\n" >> $GITHUB_STEP_SUMMARY
      - name: Fetch Release
        id: fetch_release
        run: |
          TAG_NAME=$(echo "${{ needs.initialize.outputs.version }}" | sed 's/^v//')
          RELEASE_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${TAG_NAME}" | jq -r '.id')
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_OUTPUT

      - name: Append Summary to Release
        run: |
          RELEASE_ID=${{ steps.fetch_release.outputs.RELEASE_ID }}
          RELEASE_REPORT=$(echo ${GITHUB_STEP_SUMMARY})
          echo "${GITHUB_STEP_SUMMARY}"
          curl -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -d '{"body": "'"${RELEASE_REPORT}"'"}' "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}"

  # GeneratePackagesReleaseReport:
  #   name: Generate packages release report
  #   if: ${{ always() }}
  #   # needs: [ Initialize, ReleasePackages ]
  #   runs-on: [ ubuntu-latest ]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab #v3.5.2

  #     - name: Generate pakages release report
  #       run: |
  #         echo '# Hello world! ðŸš€' >> $GITHUB_STEP_SUMMARY

