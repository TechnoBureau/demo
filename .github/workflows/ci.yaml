name: Image Build

on:
  push:
    branches:
      - main
    tags:
      - '*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Custom version (optional)'
        required: false

env:
  REGISTRY: ghcr.io
  MAJOR: 11
  MINOR: 0
  FIX: 1

jobs:
  initialize:
    runs-on: ubuntu-latest
    name: Initialize
    outputs:
      images: ${{ steps.identify-images.outputs.images }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Identify images
        id: identify-images
        run: |
          cd builders
          result=""
          for d in * ; do
            if [ -d "$d" ] && [ ! -f "$d/skip" ]; then
              if [ -z "$result" ]; then
                result="\"$d\""
              else
                result+=",\"$d\""
              fi
            fi
          done
          echo "images=[$result]" >> $GITHUB_ENV

      - name: Get Version
        id: get_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            export VERSION=${{ github.event.inputs.version }}
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            export VERSION="${{ env.MAJOR }}.${{ env.MINOR }}.${{ env.FIX }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            export VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          else
            export VERSION=${{ github.ref_name }}
          fi
          echo "version=${VERSION}" >> $GITHUB_ENV

  BuildImages:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs: [initialize]
    strategy:
      matrix:
        image: ${{ fromJson(needs.initialize.outputs.images) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: 'arm64,arm'

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Add SHORT_SHA env property with commit short sha
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{github.repository_owner}}/${{ matrix.image }}
          flavor: latest=true
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ needs.initialize.outputs.version }}.${{ github.run_number }}
            type=raw,enable=true,priority=300,prefix=,suffix=,value=${{ needs.initialize.outputs.version }}.${{ env.SHORT_SHA }}
            type=ref,event=branch
            type=ref,event=tag
          labels: |
            maintainer=${{github.repository_owner}}
            name=${{github.repository_owner}}/${{ matrix.image }}
            io.k8s.display-name=${{github.repository_owner}}/${{ matrix.image }}
            version=${{ needs.initialize.outputs.version }}
            org.opencontainers.image.title=${{github.repository_owner}}/${{ matrix.image }}
            org.opencontainers.image.version=${{ needs.initialize.outputs.version }}.${{ github.run_number }}
            org.opencontainers.image.description=${{github.repository_owner}}/${{ matrix.image }}
            org.opencontainers.image.revision=${{ env.SHORT_SHA }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: "builders:${{ matrix.image }}"
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ${{ matrix.image }}/${{ matrix.image }}.Dockerfile
          platforms: linux/amd64,linux/arm64
      - name: Set image metadata
        id: set_metadata
        run: |
          echo "IMAGE_ID_${{ matrix.image }}=${{ steps.build-and-push.outputs.imageID }}" >> $GITHUB_ENV
          echo "DIGEST_${{ matrix.image }}=${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_ENV
          echo "METADATA_${{ matrix.image }}=${{ toJson(steps.build-and-push.outputs.metadata) }}" >> $GITHUB_ENV



  GenerateImageReleaseReport:
    name: Generate image release - ${{ needs.initialize.outputs.version }}
    if: ${{ always() }}
    needs: [initialize, BuildImages]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate images release report
        id: generate_release
        run: |
          images=($(echo '${{ needs.initialize.outputs.images }}' | jq -r '.[]'))
          releaseReport="# ðŸš€ Released Packages $RELEASE ðŸš€\n"
          releaseReport+="| ðŸ“¦ Package | Internal Repository Location | Public Repository Location | Build Time | Created Date | SHA | Image Tag | Execution Time | Image Size |\n"
          releaseReport+="| :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |"

          for image in "${images[@]}"; do
            image_id_key="IMAGE_ID_${image}"
            image_id=${!image_id_key}

            digest_key="DIGEST_${image}"
            digest=${!digest_key}

            metadata_key="METADATA_${image}"
            metadata=${!metadata_key}

            # Extract required metadata fields
            createdDate=$(echo "$metadata" | jq -r '.created')
            version=$(echo "$metadata" | jq -r '.config.Labels.version')
            sha=$image_id

            # Include the metadata in the release report
            releaseReport+="\n|$image|${{ needs.initialize.outputs.version }}|1.0.0|${createdDate}|${version}|${sha}|${BUILD_TAG}|${executionTime}s|${imageSize} bytes|"
          done

          echo -e "$releaseReport" >> $GITHUB_STEP_SUMMARY
          echo -e "\n" >> $GITHUB_STEP_SUMMARY

          RELEASE_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.initialize.outputs.version }}" | jq -r '.id')
          echo "RELEASE_ID=${RELEASE_ID}" >> $GITHUB_ENV

          curl -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -d '{"body": "'"$releaseReport"'"}' "https://api.github.com/repos/${{ github.repository }}/releases/${RELEASE_ID}"
